const { describe, it, expect, beforeAll, afterAll } = require('@jest/globals');
const mongoose = require('mongoose');
const User = require('../models/User');
const Task = require('../models/Task');

// Connect to test database
beforeAll(async () => {
  await mongoose.connect(process.env.MONGODB_URI_TEST || 'mongodb://localhost:27017/merntasks_test', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  });
});

afterAll(async () => {
  await User.deleteMany();
  await Task.deleteMany();
  await mongoose.connection.close();
});

// Mock user data
const mockUser = {
  username: 'testuser',
  email: 'test@example.com',
  password: 'password123'
};

// Mock task data
const mockTask = {
  title: 'Test Task',
  description: 'This is a test task',
  status: 'pending',
  userId: '507f1f77bcf86cd799439011' // Mock ObjectId
};

// User model tests
describe('User Model Test', () => {
  it('should create a user with hashed password', async () => {
    const user = new User(mockUser);
    await user.save();
    
    expect(user.username).toEqual(mockUser.username);
    expect(user.email).toEqual(mockUser.email);
    expect(user.password).not.toEqual(mockUser.password); // Password should be hashed
    
    // Test password comparison
    const isMatch = await user.correctPassword(mockUser.password, user.password);
    expect(isMatch).toBeTruthy();
  });

  it('should not allow duplicate emails', async () => {
    const duplicateUser = new User(mockUser);
    
    await expect(duplicateUser.save()).rejects.toThrow();
  });
});

// Task model tests
describe('Task Model Test', () => {
  it('should create a task with required fields', async () => {
    const task = new Task(mockTask);
    await task.save();
    
    expect(task.title).toEqual(mockTask.title);
    expect(task.description).toEqual(mockTask.description);
    expect(task.status).toEqual(mockTask.status);
    expect(task.userId.toString()).toEqual(mockTask.userId);
    expect(task.createdAt).toBeDefined();
  });

  it('should not create a task without required fields', async () => {
    const invalidTask = new Task({
      title: 'Incomplete Task'
      // Missing description and userId
    });
    
    await expect(invalidTask.save()).rejects.toThrow();
  });
});