name: MERN CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
        
    - name: Run backend tests
      run: |
        cd backend
        npm test
      env:
        MONGODB_URI_TEST: mongodb://localhost:27017/merntasks_test
        JWT_SECRET: test-secret

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --watchAll=false

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js for backend
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Build backend
      run: |
        cd backend
        npm ci
        echo "Backend ready for deployment"
        
    - name: Setup Node.js for frontend
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build
        
    - name: Deploy to production
      run: |
        echo "Deploying to production server..."
        # Add your deployment commands here
        # For example, using rsync or scp to copy files to a server
        # or deploying to a platform like Heroku, Vercel, etc.